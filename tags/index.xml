<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags on Vlek's Personal Blog</title><link>https://vlek.github.io/tags/</link><description>Recent content in Tags on Vlek's Personal Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://vlek.github.io/tags/index.xml" rel="self" type="application/rss+xml"/><item><title>Velocity</title><link>https://vlek.github.io/velocity/</link><pubDate>Wed, 29 Mar 2023 18:56:42 -0700</pubDate><guid>https://vlek.github.io/velocity/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Things in video games tend to move. In order to calculate this movement and hold
its state in memory, the direction and velocity needs to be held.&lt;/p>
&lt;p>There are a lot of cases, even in user interfaces, where things tend to slide in
and out of view, either linearly or non-linearly (where things either speed up or
slow down as they get nearer or further away from their starting and ending
positions). This is especially useful in video games however where things like a
player&amp;rsquo;s character needs to respond to gravity when they fall or are jumping
from one platform to another.&lt;/p>
&lt;p>The way that this tracked is by holding a few variables which indicate the
direction and speed that the object was previously going and is updated based on
whether it has gotten to a floor position or may even increase in speed as it
falls. Note here that there may be a bounce effect that is desired as well, but
I will not be going into that here. Just know that this can be applied in those
cases as well, but one would need to account for the current acceleration of the
object as it hits a surface and the direction to figure out how quickly and in
what direction it should bounce towards.&lt;/p>
&lt;h1 id="algorithm">Algorithm&lt;/h1>
&lt;p>In order to hold this state, each object that is movable should have the
following variables:&lt;/p>
&lt;ul>
&lt;li>x_velocity: The positive or negative amount across the x-axis to move&lt;/li>
&lt;li>y_velocity: The positive or negative amount across the y-axis to move&lt;/li>
&lt;/ul>
&lt;p>Notice that we&amp;rsquo;re only dealing with two directions, but, as some may remember
from algebra class, we can create angles with this data by saving dissimilar
values for the X and Y.&lt;/p>
&lt;h1 id="example-case-asteroids">Example case: Asteroids&lt;/h1>
&lt;h2 id="adding-velocity">Adding velocity:&lt;/h2>
&lt;p>In order to have movement, my spaceship needed to allow for the user to use the
up arrow to go forward. This would then look at the angle that the spaceship was
facing and apply the velocity.&lt;/p>
&lt;p>The reason that I am using the mid function here is that it always returns back
the middle value. I am using this as a way to ensure that the value that I got
back was always within the max value range given. This is up to the negative
range of the max in order to have velocities going the opposite direction.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">-- update velocity and v-angle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>player.vx &lt;span style="color:#ff79c6">=&lt;/span> mid(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span>player.max_thrust,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vx &lt;span style="color:#ff79c6">+&lt;/span> cos(player.facing_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>player.thrust,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.max_thrust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>player.vy &lt;span style="color:#ff79c6">=&lt;/span> mid(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">-&lt;/span>player.max_thrust,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vy &lt;span style="color:#ff79c6">+&lt;/span> sin(player.facing_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>player.thrust,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.max_thrust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="applying-movement">Applying movement:&lt;/h2>
&lt;p>For the case where I needed this, I had remade Asteroids and needed to hold the
velocity for my spaceship, asteroids, the explosion particles, and the shots
that were fired. I had abstracted the items in such a way that I was able to use
the same function for everything:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">do_move&lt;/span>(obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- perform movement:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj.x &lt;span style="color:#ff79c6">+=&lt;/span> obj.vx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj.y &lt;span style="color:#ff79c6">+=&lt;/span> obj.vy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- if we&amp;#39;re out of screen bounds, throw us back in on the other side:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> axis &lt;span style="color:#ff79c6">in&lt;/span> all({&lt;span style="color:#f1fa8c">&amp;#39;x&amp;#39;&lt;/span>,&lt;span style="color:#f1fa8c">&amp;#39;y&amp;#39;&lt;/span>}) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> obj[axis] &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj[axis] &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">elseif&lt;/span> obj[axis] &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj[axis] &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>As you can see, the actual movement is simply applying the velocity that is
saved to the given object&amp;rsquo;s x/y coordinates. This is why the values can either
be positive or negative to have the full 2D range as possible velocity values.&lt;/p>
&lt;p>The other part deals with the classic Asteroids case where items go off screen
and should reappear on the other side of the screen. In the Pico-8 case, the
screen is always 128 (Note I did this well before I had a degree, I did not
save these as a configuration).&lt;/p>
&lt;h1 id="things-to-keep-in-mind">Things to keep in mind&lt;/h1>
&lt;h2 id="collision">Collision&lt;/h2>
&lt;p>One thing you may have noticed is that I have not accounted for collisions in my
example case. The reason for that is, in Asteroids, when things collide, they
tend to stop existing or at least reset. In the case of something like a
side-scrolling adventure game, you are likely going to need to handle the case
where the player jumps from one platform to another and comes to rest.&lt;/p>
&lt;h2 id="changing-velocity">Changing velocity&lt;/h2>
&lt;p>For things like UI elements that are supposed to glide across the screen and
stop, there may even be a desired change in the velocity as the item goes across
the screen that will need to be accounted for. This is likely going to be in the
form of a formula that&amp;rsquo;s applied across the distance traveled.&lt;/p>
&lt;p>Note that in my case, I did have a slowing effect applied. I took the x_velocity
and y_velocity values and multiplied them by 0.99 to create gradual slowing if
speed was not constantly applied.&lt;/p>
&lt;h2 id="bounce-effects">Bounce effects&lt;/h2>
&lt;p>Another thing I have not touched on other than to mention I will not address it
is if a bounce effect is wanted. This is the case where an item should fall from
a height, hit a surface, and then have at least some of its velocity applied in
the opposite direction. For the case where the game is simulating a rubber
object, it may be reduced realistically based on the bounciness of the object
that is being simulated. In the case of a puzzle game, such as with Portal with
the light sphere, the velocity does not change, merely the direction. For that,
the x_velocity and y_velocity values would be inverted (i.e., value * - 1).&lt;/p></description></item><item><title>Vector Rotation</title><link>https://vlek.github.io/vector-rotation/</link><pubDate>Mon, 27 Mar 2023 18:58:30 -0700</pubDate><guid>https://vlek.github.io/vector-rotation/</guid><description>&lt;p>&lt;img src="https://vlek.github.io/vector-rotation/assets/rotation.gif" alt="Rotating spaceship">&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Rotating a point or a shape around a fixed point is useful in a number of
scenarios, especially when it comes to game making. A number of effects, such as
having a facing direction, floating shapes, rotation, and other graphical
changes can all be handled using this base formula.&lt;/p>
&lt;p>While creating an Asteroids clone, I needed to be able to handle rotation of the
player&amp;rsquo;s space ship which I had drawn using vector graphics. Three X/Y
coordinates were being saved and lines drawn between them in order to draw the
ship which needed to be rotated based on which direction the player was facing
at any given time. For this, I used 2D rotation around an origin point formula.&lt;/p>
&lt;h1 id="algorithm">Algorithm&lt;/h1>
&lt;p>For the Pico-8 engine, the algorithm is going to be different than the one that
is generally given in a math-based answer. This is due to two factors:&lt;/p>
&lt;ul>
&lt;li>The Y-axis is inverted. Usually negative numbers are lower than positive.
&lt;ul>
&lt;li>When dealing with screens, one must remember that (0,0) is the top-left most
point.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The cos and sin functions operate differently than in other languages.
&lt;ul>
&lt;li>From the &lt;a href="https://pico-8.fandom.com/wiki/Cos">documentation&lt;/a>: &lt;i>PICO-8 uses an input range of 0.0 to 1.0 to
represent the angle, a percentage of the unit circle. Some refer to these
units as &amp;ldquo;turns&amp;rdquo;. For instance, 180° or π (3.14159) radians corresponds to
0.5 turns in PICO-8&amp;rsquo;s representation of angles. In fact, for fans of τ
(tau), it&amp;rsquo;s just a matter of dropping τ from your expression.&lt;/i>&lt;/li>
&lt;li>Also it looks like the rotation is reversed. Positive is clockwise, not
counter-clockwise.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>new x = x + R * cos(A / 360)&lt;br>
new y = y + R * sin(A / 360)&lt;/p>
&lt;p>Where:&lt;/p>
&lt;ul>
&lt;li>R = The radius of the circle that is made between the origin and the point&lt;/li>
&lt;li>A = The degrees off of the base facing angle (0-360 inclusive)&lt;/li>
&lt;/ul>
&lt;h1 id="example-case-asteroids-spaceship">Example case: Asteroids Spaceship&lt;/h1>
&lt;p>In my specific case, I was doing a 2D Asteroids remake where I had a player with
a given X/Y position. Based on this position, I would draw three lines that go
between points which outlined the ship to create a triangle. These points were
given as measurements off of the player&amp;rsquo;s position as though they were facing
north.&lt;/p>
&lt;p>In order for me to handle rotation, an additional variable was kept for the
angle that the player was currently facing given in terms of 360 degrees. If it
was the case that a player was going to go above or below the 0-359 degree
rotation thresholds, then it would wrap around to the other side to complete the
circle.&lt;/p>
&lt;h2 id="setup-code">Setup code&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">-- Create a table to hold the player&amp;#39;s variables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>player &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">-- For the game engine I was using, the screen was always 128x128.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">-- Initialize the player&amp;#39;s location, starting in the middle.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>player.x &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>player.y &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">-- New variable for keeping track of where the player is facing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>player.direction &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">275&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h1 id="example-case-code">Example Case Code&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">draw_spaceship&lt;/span>(x, y, ship_angle)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- First, we calculate where the nose of the plane is.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> nose_angle &lt;span style="color:#ff79c6">=&lt;/span> ship_angle &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">180&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- Then we generate the points using the formula&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> nose_x &lt;span style="color:#ff79c6">=&lt;/span> x &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> cos(nose_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> nose_y &lt;span style="color:#ff79c6">=&lt;/span> y &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> sin(nose_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- Next, we must gather the two other points&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- creating a table to hold the x/y pairs.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> line_points &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- The spaceship itself has a point with 60 degrees.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- We will grab points 30 degrees off the center line.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- Think of this like folding a paper airplane.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> angle &lt;span style="color:#ff79c6">in&lt;/span> all({&lt;span style="color:#bd93f9">30&lt;/span>,&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">30&lt;/span>}) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- We will need these points later to finish the ship.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> x &lt;span style="color:#ff79c6">=&lt;/span> x &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> cos((ship_angle &lt;span style="color:#ff79c6">+&lt;/span> angle)&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> y &lt;span style="color:#ff79c6">=&lt;/span> y &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> sin((ship_angle &lt;span style="color:#ff79c6">+&lt;/span> angle)&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(line_points, {x,y})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- But we can use the nose and the current point as well.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line(nose_x,nose_y,x,y,&lt;span style="color:#bd93f9">7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- Finally, connect the two legs of the spaceship&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line_points[&lt;span style="color:#bd93f9">1&lt;/span>][&lt;span style="color:#bd93f9">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line_points[&lt;span style="color:#bd93f9">1&lt;/span>][&lt;span style="color:#bd93f9">2&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line_points[&lt;span style="color:#bd93f9">2&lt;/span>][&lt;span style="color:#bd93f9">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line_points[&lt;span style="color:#bd93f9">2&lt;/span>][&lt;span style="color:#bd93f9">2&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bd93f9">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>The algorithm that can be applied to a number of points around a fixed position
allows for their rotation which, in some cases (especially vector graphics
games), can be the desired effect.&lt;/p>
&lt;p>Note that the rotation may need to be accounted for in one&amp;rsquo;s code dealing with
collision detection. This may also work in a 3D space if the rotation that is
being applied only happens in a single plane that is at a right-angle. Any
deviation from that would require that the third dimension be accounted for in
the calculation.&lt;/p></description></item><item><title>Remaking Asteroids</title><link>https://vlek.github.io/remaking-asteroids/</link><pubDate>Wed, 15 Mar 2023 00:00:00 -0700</pubDate><guid>https://vlek.github.io/remaking-asteroids/</guid><description>&lt;iframe src="https://www.lexaloffle.com/bbs/widget.php?pid=22904" allowfullscreen width="621" height="513" style="border:none; overflow:hidden">&lt;/iframe>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Asteroids, the space shooter game originally developed by Atari in 1979, has an iconic visual style
and gameplay that has seen many revisions and spawned an entire genre of video games
under the top-down shooter moniker. Due to its simple design and appeal, it is
appealing to programmers to recreate the classic game in an attempt
to get a better understanding of game making principles, including vector
graphics, velocity, and handling state including from the new game
screen, the gameplay, and a game over screen along with the in-game state of
having multiple objects moving around and interacting with each other through
collision detection.&lt;/p>
&lt;p>In this article, I will be going over my implementation of the classic Asteroids
game and detailing the things that I learned along the way, including tidbits
regarding the Pico-8 game engine that I used to do it.&lt;/p>
&lt;h1 id="environment-setup">Environment Setup&lt;/h1>
&lt;p>First thing is first, I needed to get my tooling set up in a way that would make
the game development easier than working within Pico-8. While the game engine
does provide an editor, it lacks a lot of features that would make programming
easier, including syntax highlighting, warnings and error notifications, and
smart indent/outdent along with a host of macros.&lt;/p>
&lt;h2 id="moving-to-atom">Moving to Atom&lt;/h2>
&lt;p>During the time that I was working on this, Atom had a vibrant community and
included the necessary configurations to make Pico-8 development easier. This
IDE made single-file editing a breeze and even came with a theme to make the IDE
appear Pico-8-like if that was the developer&amp;rsquo;s choice. There was also a plugin
available so that the IDE would recognize the underlying helper Lua functions
and global variables that the engine provided.&lt;/p>
&lt;p>I had even done a write-up where others weighed in on the configuration that I
had done, adding to the conversation with me updating my post to include other
insights that the community had included which helped me further hone my IDE.&lt;/p>
&lt;h2 id="auto-update-and-play">Auto-update and play&lt;/h2>
&lt;p>One thing that the Pico-8 IDE allowed for that was hard to get working outside
of it was a macro so that the file could be saved and opened in Pico-8 to begin
play testing. Through some configuration changes, I was able to get Atom to have
this feature as well and bound it to Ctrl + F5 like one would normally for
running a currently open project.&lt;/p>
&lt;h1 id="solution-design">Solution Design&lt;/h1>
&lt;p>During this time, I was much less focused on solutioning. I went into it knowing
that there were parts that I was going to need to add and then sought to add
them in chunks as I finished them. The main parts that I sought to add were a
spaceship that the user controlled with the left/right rotation and the ability
to increase velocity with the acceleration button, randomly generated asteroids,
and the ability to fire one&amp;rsquo;s weapon and have it destroy asteroids that it came
in contact with which would crease pieces of itself until it eventually
disintegrated.&lt;/p>
&lt;p>Having done a few Pico-8 games in the past, I was aware that I was going to need
to use both the Update and Draw functions in order to both accept user input and
have the game state reflected on the screen.&lt;/p>
&lt;h1 id="implementation">Implementation&lt;/h1>
&lt;p>&lt;img src="https://vlek.github.io/remaking-asteroids/images/asteroids_start_screen.png" alt="Start Screen">&lt;/p>
&lt;h2 id="creating-the-players-spaceship">Creating the player&amp;rsquo;s spaceship&lt;/h2>
&lt;p>First thing is first, the player needs to be able to take control of a spaceship
in order to destroy asteroids. I felt like this was as good a place as any to
start with. I first went with creating my three-line spaceship and set it so that
it was facing up. I would then use 360 degrees as a method of having it rotate
in place.&lt;/p>
&lt;p>Little did I know ahead of time that this was going to involve calculus in order
to do the rotation of the spaceship. I was trying to reinvent the wheel myself
while not having the underlying math necessary to really be able to do what it
was that I was setting out to do. I had tried a number of things to see if I
could challenge myself, and I made some funny mistakes that really got me
excited about the possibility of doing this sort of math for vector-based
graphics. In one instance, I had the spaceship rotating and warping in and out
of view as though it was traveling across the face of an invisible ball.&lt;/p>
&lt;p>For my article related to rotation, &lt;a href="https://vlek.github.io/vector-rotation/">click here&lt;/a>&lt;/p>
&lt;h2 id="adding-asteroids">Adding asteroids&lt;/h2>
&lt;p>Asteroids are added based on the level number. Additional asteroids are given
for higher levels with a maximum of four big ones being given at high enough
levels. This is due to the small screen real estate and something that could and
very likely should be dialed in further, even with smaller asteroids thrown into
the mix.&lt;/p>
&lt;h2 id="handling-collisions">Handling collisions&lt;/h2>
&lt;p>While it will cause collisions when not strictly correct, I am using
circle/circle collision detection. What this means is that, the spaceship is
touching an asteroid if it&amp;rsquo;s the case that the midpoints of the two objects are
close enough that their radius&amp;rsquo; are overlapping.&lt;/p>
&lt;p>This works a lot better for things that are more circular, such as the shots
that the ship fires.&lt;/p>
&lt;h2 id="handling-movement">Handling movement&lt;/h2>
&lt;p>Velocity was a fun concept to try to deal with. I found a good article that went
over how to handle it, but the basic concept is that, for each item that the
developer wishes to have move, it needs to have both an X and Y velocity amount
that is either positive or negative that reflects how fast the given item is
moving in that direction. During the game&amp;rsquo;s update function, that amount is
either increased, decreased, or remains the same based on the rules of the
object and whether anything is acting upon it (think the player&amp;rsquo;s input of the
velocity button increasing the velocity of the ship in the direction it is
pointing.)&lt;/p>
&lt;p>Thankfully for me, while I was working on things, I came to the realization that
the bit of code that was handling the collision detection as well as the
movement were both generalizable to all of the objects in the game. Each thing,
including the graphical bits of the asteroids and spaceship that are generated
on a collision, are all moved using the same code!&lt;/p>
&lt;p>For my article related to velocity, &lt;a href="https://vlek.github.io/velocity/">click here&lt;/a>.&lt;/p>
&lt;h2 id="setbacks">Setbacks&lt;/h2>
&lt;h3 id="rotation">Rotation&lt;/h3>
&lt;p>As noted in my &lt;a href="https://vlek.github.io/vector-rotation/">article&lt;/a> on rotation,
there were some quirks in the Pico-8 engine which caused the actual algorithm
that I am using to be different than the standard one that would generally be
used. The one that I am using appears to be a truncated one due to the quirky
behavior of the cos and sin functions, so what I did is likely not reproducible
in other engines without using what would instead be considered the correct
algorithm.&lt;/p>
&lt;h3 id="engine-limitations">Engine limitations&lt;/h3>
&lt;h4 id="screen-size">Screen size&lt;/h4>
&lt;p>This is probably the most irritating of the setbacks that were faced. The
limitation on the number of pixels that are given is a huge issue for this type
of game specifically. It seems like 128x128 is just not enough to really give
the player breathing room between them and the asteroids that are coming,
especially at some of the higher velocities that I currently have them set at.&lt;/p>
&lt;p>If I was going to do this game over again, I would want probably at least
600x400, which would probably give me enough to double the size of the objects
in the game and still give the necessary breathing room and even add in the
alien ships.&lt;/p>
&lt;h4 id="lack-of-built-ins">Lack of built-ins&lt;/h4>
&lt;p>The engine purposely gives a very small number of tools and allows the user to
remake a lot of things by hand. This, coupled with the fact that there is a code
size limitation, causes the developer to make choices in terms of what can be
done.&lt;/p>
&lt;p>The issues that I ran into are trying to find the correct algorithms for things
like collision, rotation, velocity, etc. Also trying to keep data in a sane way
for all of the objects and access them.&lt;/p>
&lt;h3 id="lua">Lua&lt;/h3>
&lt;p>The engine uses the Lua language. The language itself has very little tools
included purposefully in order to keep the language size down. Its syntax is
also not the most easy to read either. It definitely felt like more of a
hindrance than something that makes the engine shine. I feel like I would have
had an easier time if I were working with Python for instance where I would have
had classes and things, maybe even multiple file support.&lt;/p>
&lt;h2 id="code">Code&lt;/h2>
&lt;details>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">-- asteroids&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">-- by vlek&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tick &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>blink &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>explosion_colors &lt;span style="color:#ff79c6">=&lt;/span> {&lt;span style="color:#bd93f9">6&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>,&lt;span style="color:#bd93f9">12&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>game &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>player &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>laser_shots &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>asteroids &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>explosions &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brighter &lt;span style="color:#ff79c6">=&lt;/span> {&lt;span style="color:#bd93f9">1&lt;/span>,&lt;span style="color:#bd93f9">5&lt;/span>,&lt;span style="color:#bd93f9">14&lt;/span>,&lt;span style="color:#bd93f9">11&lt;/span>,&lt;span style="color:#bd93f9">9&lt;/span>,&lt;span style="color:#bd93f9">13&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>,&lt;span style="color:#bd93f9">14&lt;/span>,&lt;span style="color:#bd93f9">10&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>,&lt;span style="color:#bd93f9">6&lt;/span>,&lt;span style="color:#bd93f9">15&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">line&lt;/span>(x1,y1,x2,y2,c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dx&lt;span style="color:#ff79c6">=&lt;/span>x2&lt;span style="color:#ff79c6">-&lt;/span>x1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dy&lt;span style="color:#ff79c6">=&lt;/span>y2&lt;span style="color:#ff79c6">-&lt;/span>y1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len&lt;span style="color:#ff79c6">=&lt;/span> sqrt(dx&lt;span style="color:#ff79c6">*&lt;/span>dx&lt;span style="color:#ff79c6">+&lt;/span>dy&lt;span style="color:#ff79c6">*&lt;/span>dy)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> len !&lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> f&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">0&lt;/span>,len,&lt;span style="color:#bd93f9">0.3&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x&lt;span style="color:#ff79c6">=&lt;/span>x1&lt;span style="color:#ff79c6">+&lt;/span>dx&lt;span style="color:#ff79c6">*&lt;/span>f&lt;span style="color:#ff79c6">/&lt;/span>len&lt;span style="color:#ff79c6">+&lt;/span>&lt;span style="color:#bd93f9">0.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y&lt;span style="color:#ff79c6">=&lt;/span>y1&lt;span style="color:#ff79c6">+&lt;/span>dy&lt;span style="color:#ff79c6">*&lt;/span>f&lt;span style="color:#ff79c6">/&lt;/span>len&lt;span style="color:#ff79c6">+&lt;/span>&lt;span style="color:#bd93f9">0.5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pset(x,y,brighter[pget(x,y)&lt;span style="color:#ff79c6">+&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">_init&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game_menu()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">_draw&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game.draw()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">_update&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game.update()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">game_menu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generate_asteroids(&lt;span style="color:#bd93f9">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game.update &lt;span style="color:#ff79c6">=&lt;/span> menu_update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game.draw &lt;span style="color:#ff79c6">=&lt;/span> draw_menu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">menu_update&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">5&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> btnp(i) &lt;span style="color:#ff79c6">then&lt;/span> new_game() &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> asteroid &lt;span style="color:#ff79c6">in&lt;/span> all(asteroids) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> do_move(asteroid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> do_tick()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">draw_menu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cls()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rectfill(&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">128&lt;/span>,&lt;span style="color:#bd93f9">128&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> draw_asteroids()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> centerprint(&lt;span style="color:#f1fa8c">&amp;#39;asteroids&amp;#39;&lt;/span>,&lt;span style="color:#bd93f9">64&lt;/span>,&lt;span style="color:#bd93f9">36&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> blink &lt;span style="color:#ff79c6">then&lt;/span> centerprint(&lt;span style="color:#f1fa8c">&amp;#39;press any button to start&amp;#39;&lt;/span>,&lt;span style="color:#bd93f9">64&lt;/span>,&lt;span style="color:#bd93f9">94&lt;/span>) &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">new_game&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.x &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.y &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vx &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vy &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.thrust &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.max_thrust &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.facing_angle &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">275&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.score1 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.score2 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.lives &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.level &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.level_display_counter &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.ticks_until_next_level &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.isdead &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.ticks_until_respawn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">90&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.isinvulnerable &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.invulnerability_counter &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> laser_shots &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroids &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> explosions &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game.update &lt;span style="color:#ff79c6">=&lt;/span> game_update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game.draw &lt;span style="color:#ff79c6">=&lt;/span> game_draw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">game_update&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> explosion &lt;span style="color:#ff79c6">in&lt;/span> all(explosions) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> explosion.steps &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> explosion.steps &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> bit &lt;span style="color:#ff79c6">in&lt;/span> all(explosion.bits) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> do_move(bit)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> del(explosions, explosion)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> laser_beam &lt;span style="color:#ff79c6">in&lt;/span> all(laser_shots) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- check for collisions with asteroids&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> collided &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> asteroid &lt;span style="color:#ff79c6">in&lt;/span> all(asteroids) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> check_collision(laser_beam.x,laser_beam.y,asteroid.x,asteroid.y,&lt;span style="color:#bd93f9">2&lt;/span>,asteroid.collision_size) &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> collided &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid_collision(asteroid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> collided &lt;span style="color:#ff79c6">or&lt;/span> laser_beam.movement_count &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">29&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> del(laser_shots, laser_beam)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> do_move(laser_beam)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> laser_beam.movement_count &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">#&lt;/span>asteroids &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> asteroid &lt;span style="color:#ff79c6">in&lt;/span> all(asteroids) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- check for collision with player spaceship&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> check_collision(player.x,player.y,asteroid.x,asteroid.y,&lt;span style="color:#bd93f9">4&lt;/span>,asteroid.collision_size) &lt;span style="color:#ff79c6">and&lt;/span> &lt;span style="color:#ff79c6">not&lt;/span> player.isdead &lt;span style="color:#ff79c6">and&lt;/span> &lt;span style="color:#ff79c6">not&lt;/span> player.isinvulnerable &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid_collision(asteroid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player_collision()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> do_move(asteroid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- if there are no more asteroids, then spawn more&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.ticks_until_next_level &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.level &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.level_display_counter &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level_asteroids &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.level &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">5&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level_asteroids &lt;span style="color:#ff79c6">+=&lt;/span> player.level
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level_asteroids &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generate_asteroids(level_asteroids)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.ticks_until_next_level &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">90&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.ticks_until_next_level &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> do_move(player)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- we&amp;#39;re only tracking button presses when the player is alive&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">not&lt;/span> player.isdead &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> btn(&lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.facing_angle &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.facing_angle &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">360&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.facing_angle &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">360&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> btn(&lt;span style="color:#bd93f9">1&lt;/span>) &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.facing_angle &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.facing_angle &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.facing_angle &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">360&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> btn(&lt;span style="color:#bd93f9">2&lt;/span>) &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- update velocity and v-angle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vx &lt;span style="color:#ff79c6">=&lt;/span> mid(&lt;span style="color:#ff79c6">-&lt;/span>player.max_thrust,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vx &lt;span style="color:#ff79c6">+&lt;/span> cos(player.facing_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>player.thrust,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.max_thrust)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vy &lt;span style="color:#ff79c6">=&lt;/span> mid(&lt;span style="color:#ff79c6">-&lt;/span>player.max_thrust,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vy &lt;span style="color:#ff79c6">+&lt;/span> sin(player.facing_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>player.thrust,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.max_thrust)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sfx(&lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- otherwise, we&amp;#39;re going to apply the space breaks (physics be damned)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vx &lt;span style="color:#ff79c6">*=&lt;/span> &lt;span style="color:#bd93f9">0.99&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vy &lt;span style="color:#ff79c6">*=&lt;/span> &lt;span style="color:#bd93f9">0.99&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- if they&amp;#39;re trying to shoot and they have less than five bullets on screen,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> btnp(&lt;span style="color:#bd93f9">4&lt;/span>) &lt;span style="color:#ff79c6">and&lt;/span> &lt;span style="color:#ff79c6">#&lt;/span>laser_shots &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">5&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> nose_angle &lt;span style="color:#ff79c6">=&lt;/span> player.facing_angle &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">180&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shoot(player.x &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">5&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> cos(nose_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.y &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">5&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> sin(nose_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cos(player.facing_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sin(player.facing_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sfx(&lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.invulnerability_counter &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.invulnerability_counter &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.invulnerability_counter &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.isinvulnerable &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- if we have no more lives, game over&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.lives &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.ticks_until_respawn &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">5&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> btnp(i) &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_game()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.ticks_until_respawn &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.ticks_until_respawn &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.isdead &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.ticks_until_respawn &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.level_display_counter &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span> player.level_display_counter &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> do_tick()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">game_draw&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cls()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rectfill(&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">128&lt;/span>,&lt;span style="color:#bd93f9">128&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> explosion &lt;span style="color:#ff79c6">in&lt;/span> all(explosions) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> bit &lt;span style="color:#ff79c6">in&lt;/span> all(explosion.bits) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pset(bit.x,bit.y,bit.color)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> laser_beam &lt;span style="color:#ff79c6">in&lt;/span> all(laser_shots) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circfill(laser_beam.x,laser_beam.y,&lt;span style="color:#bd93f9">1&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> draw_asteroids()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- we&amp;#39;re only going to draw the spaceship if the player isn&amp;#39;t dead&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.isdead &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.lives &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> blink &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> centerprint(&lt;span style="color:#f1fa8c">&amp;#39;game over&amp;#39;&lt;/span>,&lt;span style="color:#bd93f9">64&lt;/span>,&lt;span style="color:#bd93f9">36&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> centerprint(&lt;span style="color:#f1fa8c">&amp;#39;play again?&amp;#39;&lt;/span>,&lt;span style="color:#bd93f9">64&lt;/span>,&lt;span style="color:#bd93f9">85&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">not&lt;/span> player.isinvulnerable &lt;span style="color:#ff79c6">or&lt;/span> player.isinvulnerable &lt;span style="color:#ff79c6">and&lt;/span> tick&lt;span style="color:#ff79c6">%&lt;/span>&lt;span style="color:#bd93f9">15&lt;/span>&lt;span style="color:#ff79c6">&amp;gt;&lt;/span>&lt;span style="color:#bd93f9">7&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> draw_spaceship(player.x, player.y, player.facing_angle)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.level_display_counter &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> level_string &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;level &amp;#39;&lt;/span>&lt;span style="color:#ff79c6">..&lt;/span>player.level
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(level_string,&lt;span style="color:#bd93f9">64&lt;/span>&lt;span style="color:#ff79c6">-#&lt;/span>level_string&lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#bd93f9">4&lt;/span>&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>,&lt;span style="color:#bd93f9">36&lt;/span>,&lt;span style="color:#bd93f9">7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_score()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>,player.lives&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> draw_spaceship(i&lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#bd93f9">5&lt;/span>,&lt;span style="color:#bd93f9">11&lt;/span>,&lt;span style="color:#bd93f9">271&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">--print(&amp;#39;2016 vlek&amp;#39;,45,122)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">draw_spaceship&lt;/span>(x_coord, y_coord, ship_angle)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> nose_angle &lt;span style="color:#ff79c6">=&lt;/span> ship_angle &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">180&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> nose_x_coord &lt;span style="color:#ff79c6">=&lt;/span> x_coord &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> cos(nose_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> nose_y_coord &lt;span style="color:#ff79c6">=&lt;/span> y_coord &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> sin(nose_angle&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> line_points &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> angle &lt;span style="color:#ff79c6">in&lt;/span> all({&lt;span style="color:#bd93f9">30&lt;/span>,&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">30&lt;/span>}) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> x &lt;span style="color:#ff79c6">=&lt;/span> x_coord &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> cos((ship_angle &lt;span style="color:#ff79c6">+&lt;/span> angle)&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> y &lt;span style="color:#ff79c6">=&lt;/span> y_coord &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">*&lt;/span> sin((ship_angle &lt;span style="color:#ff79c6">+&lt;/span> angle)&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(line_points, {x,y})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line(nose_x_coord,nose_y_coord,x,y,&lt;span style="color:#bd93f9">7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- connect the two legs of the spaceship&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line(line_points[&lt;span style="color:#bd93f9">1&lt;/span>][&lt;span style="color:#bd93f9">1&lt;/span>],line_points[&lt;span style="color:#bd93f9">1&lt;/span>][&lt;span style="color:#bd93f9">2&lt;/span>],line_points[&lt;span style="color:#bd93f9">2&lt;/span>][&lt;span style="color:#bd93f9">1&lt;/span>],line_points[&lt;span style="color:#bd93f9">2&lt;/span>][&lt;span style="color:#bd93f9">2&lt;/span>],&lt;span style="color:#bd93f9">7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">draw_asteroids&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> asteroid &lt;span style="color:#ff79c6">in&lt;/span> all(asteroids) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> point&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>,&lt;span style="color:#ff79c6">#&lt;/span>asteroid.points&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line(asteroid.points[point][&lt;span style="color:#bd93f9">1&lt;/span>]&lt;span style="color:#ff79c6">+&lt;/span>asteroid.x,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.points[point][&lt;span style="color:#bd93f9">2&lt;/span>]&lt;span style="color:#ff79c6">+&lt;/span>asteroid.y,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.points[point&lt;span style="color:#ff79c6">+&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>][&lt;span style="color:#bd93f9">1&lt;/span>]&lt;span style="color:#ff79c6">+&lt;/span>asteroid.x,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.points[point&lt;span style="color:#ff79c6">+&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>][&lt;span style="color:#bd93f9">2&lt;/span>]&lt;span style="color:#ff79c6">+&lt;/span>asteroid.y,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#bd93f9">7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- lastly, draw the line between the first and last points:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line(asteroid.points[&lt;span style="color:#bd93f9">1&lt;/span>][&lt;span style="color:#bd93f9">1&lt;/span>]&lt;span style="color:#ff79c6">+&lt;/span>asteroid.x,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.points[&lt;span style="color:#bd93f9">1&lt;/span>][&lt;span style="color:#bd93f9">2&lt;/span>]&lt;span style="color:#ff79c6">+&lt;/span>asteroid.y,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.points[&lt;span style="color:#ff79c6">#&lt;/span>asteroid.points][&lt;span style="color:#bd93f9">1&lt;/span>]&lt;span style="color:#ff79c6">+&lt;/span>asteroid.x,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.points[&lt;span style="color:#ff79c6">#&lt;/span>asteroid.points][&lt;span style="color:#bd93f9">2&lt;/span>]&lt;span style="color:#ff79c6">+&lt;/span>asteroid.y,&lt;span style="color:#bd93f9">7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">shoot&lt;/span>(x, y, vx, vy)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> laser_beam &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> laser_beam.x &lt;span style="color:#ff79c6">=&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> laser_beam.y &lt;span style="color:#ff79c6">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> laser_beam.vx &lt;span style="color:#ff79c6">=&lt;/span> vx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> laser_beam.vy &lt;span style="color:#ff79c6">=&lt;/span> vy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> laser_beam.movement_count &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(laser_shots, laser_beam)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">do_move&lt;/span>(obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- perform movement:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj.x &lt;span style="color:#ff79c6">+=&lt;/span> obj.vx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj.y &lt;span style="color:#ff79c6">+=&lt;/span> obj.vy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- if we&amp;#39;re out of screen bounds, throw us back in on the other side:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> axis &lt;span style="color:#ff79c6">in&lt;/span> all({&lt;span style="color:#f1fa8c">&amp;#39;x&amp;#39;&lt;/span>,&lt;span style="color:#f1fa8c">&amp;#39;y&amp;#39;&lt;/span>}) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> obj[axis] &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj[axis] &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">elseif&lt;/span> obj[axis] &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj[axis] &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">do_tick&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> tick &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">29&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tick &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tick &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> blink &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blink &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blink &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">randint&lt;/span>(min, max)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> range&lt;span style="color:#ff79c6">=&lt;/span>(max&lt;span style="color:#ff79c6">+&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>)&lt;span style="color:#ff79c6">-&lt;/span>min
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> flr(rnd(range)&lt;span style="color:#ff79c6">+&lt;/span>min)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">randfloat&lt;/span>(max)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- this is really misleading, but it gives a positive or a negative&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- float up to but not including the maximum&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> randint(&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span>) &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> rnd(max)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> rnd(max) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">create_asteroid&lt;/span>(x,y,vx,vy,size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> asteroid &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.x &lt;span style="color:#ff79c6">=&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.y &lt;span style="color:#ff79c6">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.vx &lt;span style="color:#ff79c6">=&lt;/span> vx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.vy &lt;span style="color:#ff79c6">=&lt;/span> vy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.size &lt;span style="color:#ff79c6">=&lt;/span> size
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.points &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.collision_size &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> degrees &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">360&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">while&lt;/span> degrees &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> degrees &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">30&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> degrees &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> degrees &lt;span style="color:#ff79c6">-=&lt;/span> randint(&lt;span style="color:#bd93f9">20&lt;/span>,&lt;span style="color:#bd93f9">50&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> new_x &lt;span style="color:#ff79c6">=&lt;/span> randint(size&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>,size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> dx &lt;span style="color:#ff79c6">=&lt;/span> new_x &lt;span style="color:#ff79c6">*&lt;/span> cos(degrees&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> new_y &lt;span style="color:#ff79c6">=&lt;/span> randint(size&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>,size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> dy &lt;span style="color:#ff79c6">=&lt;/span> new_y &lt;span style="color:#ff79c6">*&lt;/span> sin(degrees&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">360&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> v &lt;span style="color:#ff79c6">in&lt;/span> all({new_x, new_y}) &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> v &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> asteroid.collision_size &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> asteroid.collision_size &lt;span style="color:#ff79c6">=&lt;/span> v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(asteroid.points, {dx,dy})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(asteroids, asteroid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">create_explosion&lt;/span>(x,y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> explosion &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> explosion.x &lt;span style="color:#ff79c6">=&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> explosion.y &lt;span style="color:#ff79c6">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> explosion.bits &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">0&lt;/span>,randint(&lt;span style="color:#bd93f9">5&lt;/span>,&lt;span style="color:#bd93f9">9&lt;/span>),&lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> bit &lt;span style="color:#ff79c6">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bit.x &lt;span style="color:#ff79c6">=&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bit.y &lt;span style="color:#ff79c6">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bit.vx &lt;span style="color:#ff79c6">=&lt;/span> randfloat(&lt;span style="color:#bd93f9">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bit.vy &lt;span style="color:#ff79c6">=&lt;/span> randfloat(&lt;span style="color:#bd93f9">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bit.color &lt;span style="color:#ff79c6">=&lt;/span> explosion_colors[randint(&lt;span style="color:#bd93f9">1&lt;/span>,&lt;span style="color:#ff79c6">#&lt;/span>explosion_colors)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(explosion.bits, bit)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> explosion.steps &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add(explosions, explosion)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">check_collision&lt;/span>(x1,y1,x2,y2,rad1,rad2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- check collision for two objects based on central points and radii&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> rad1&lt;span style="color:#ff79c6">+&lt;/span>rad2 &lt;span style="color:#ff79c6">&amp;gt;=&lt;/span> sqrt((x2&lt;span style="color:#ff79c6">-&lt;/span>x1)&lt;span style="color:#ff79c6">^&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>&lt;span style="color:#ff79c6">+&lt;/span>(y2&lt;span style="color:#ff79c6">-&lt;/span>y1)&lt;span style="color:#ff79c6">^&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">generate_asteroids&lt;/span>(asteroid_count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> pico&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>,asteroid_count,&lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> x &lt;span style="color:#ff79c6">=&lt;/span> randint(&lt;span style="color:#bd93f9">1&lt;/span>,&lt;span style="color:#bd93f9">127&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> y &lt;span style="color:#ff79c6">=&lt;/span> randint(&lt;span style="color:#bd93f9">1&lt;/span>,&lt;span style="color:#bd93f9">127&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> randint(&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span>) &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#ff79c6">=&lt;/span> randint(&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span>) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#ff79c6">=&lt;/span> randint(&lt;span style="color:#bd93f9">0&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span>) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">127&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create_asteroid(x,y,randfloat(&lt;span style="color:#bd93f9">1&lt;/span>),randfloat(&lt;span style="color:#bd93f9">1&lt;/span>),&lt;span style="color:#bd93f9">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">asteroid_collision&lt;/span>(asteroid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- if it wasn&amp;#39;t a small asteroid, spawn more&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> asteroid.size &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">8&lt;/span> &lt;span style="color:#ff79c6">or&lt;/span> asteroid.size &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>,&lt;span style="color:#bd93f9">2&lt;/span>,&lt;span style="color:#bd93f9">1&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create_asteroid(asteroid.x,asteroid.y,randfloat(&lt;span style="color:#bd93f9">2&lt;/span>),randfloat(&lt;span style="color:#bd93f9">2&lt;/span>),asteroid.size&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> asteroid.size &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">8&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> increase_score(&lt;span style="color:#bd93f9">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">elseif&lt;/span> asteroid.size &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> increase_score(&lt;span style="color:#bd93f9">25&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> increase_score(&lt;span style="color:#bd93f9">50&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create_explosion(asteroid.x,asteroid.y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> del(asteroids, asteroid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sfx(&lt;span style="color:#bd93f9">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">player_collision&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.lives &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.isdead &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.ticks_until_respawn &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.x &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.y &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vx &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.vy &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.isinvulnerable &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.invulnerability_counter &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.lives &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span> sfx(&lt;span style="color:#bd93f9">4&lt;/span>) &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">centerprint&lt;/span>(text,x,y,color)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> color &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span> color &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">7&lt;/span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(text,x&lt;span style="color:#ff79c6">-#&lt;/span>text&lt;span style="color:#ff79c6">*&lt;/span>&lt;span style="color:#bd93f9">4&lt;/span>&lt;span style="color:#ff79c6">/&lt;/span>&lt;span style="color:#bd93f9">2&lt;/span>,y,color)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">increase_score&lt;/span>(points)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> old_score &lt;span style="color:#ff79c6">=&lt;/span> player.score1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.score1 &lt;span style="color:#ff79c6">+=&lt;/span> points
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> flr((player.score1 &lt;span style="color:#ff79c6">/&lt;/span> &lt;span style="color:#bd93f9">5000&lt;/span>)) &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> flr((old_score &lt;span style="color:#ff79c6">/&lt;/span> &lt;span style="color:#bd93f9">5000&lt;/span>)) &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.lives &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sfx(&lt;span style="color:#bd93f9">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.score1 &lt;span style="color:#ff79c6">&amp;gt;=&lt;/span> &lt;span style="color:#bd93f9">10000&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.score2 &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> player.score1 &lt;span style="color:#ff79c6">-=&lt;/span> &lt;span style="color:#bd93f9">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">print_score&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">-- cleverly printing the player&amp;#39;s score&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color(&lt;span style="color:#bd93f9">7&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8be9fd;font-style:italic">local&lt;/span> x_offset &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">if&lt;/span> player.score2 &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#ff79c6">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(player.score2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x_offset &lt;span style="color:#ff79c6">+=&lt;/span> &lt;span style="color:#bd93f9">20&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#ff79c6">#&lt;/span>(player.score1&lt;span style="color:#ff79c6">..&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;&amp;#34;&lt;/span>) &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#bd93f9">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">for&lt;/span> i&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#bd93f9">4&lt;/span>,x_offset&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">4&lt;/span>,&lt;span style="color:#bd93f9">4&lt;/span> &lt;span style="color:#ff79c6">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#f1fa8c">&amp;#39;0&amp;#39;&lt;/span>,i,&lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ff79c6">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(player.score1,x_offset,&lt;span style="color:#bd93f9">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/details>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>I was able to make a fully-functional version of Asteroids in a relatively small
amount of code in a toy game engine. The game itself is a little aggravating to
play due to the small resolution that the engine offers, but is good for some
edge-of-your-seat gameplay as asteroids quickly fly passed.&lt;/p>
&lt;p>As a learning project, I feel like this was a great opportunity. There were
several things, especially fundamental game making concepts, that I was able to
touch such as holding state for the intro, gameplay, and game over screens.
There are a number of things that I would do differently today with the
knowledge that I gained from the project, but I believe that that is a very
common thing in programming which only shows growth.&lt;/p>
&lt;h2 id="overall-assessment">Overall assessment&lt;/h2>
&lt;p>I am proud of the finished product and also am happy that I took the time to
learn what I did. I tried my best to first try things on my own before
researching how others do things as a way to test myself. This retrofitting has
caused some disjointed code and the single-file nature of the game files does
not help this problem either.&lt;/p>
&lt;h2 id="things-that-could-be-better">Things that could be better&lt;/h2>
&lt;h3 id="gameplay">Gameplay&lt;/h3>
&lt;p>The game, due to the low resolution, makes it very difficult to play for long
without dying. The controls themselves are fine, but, with how little game play
area there is, the asteroids are upon the user quicker than in the original
game. If I was going to tweak this, I would probably reduce the number of
asteroids that appear on screen, make them a bit smaller, or change the
asteroid sizes when they do appear.&lt;/p>
&lt;h3 id="difficulty-options">Difficulty options&lt;/h3>
&lt;p>Right now there is no setting for how hard the game ought to be. Even something
like an Easy, Medium, and Hard mode selection would help with it dictating
things like the number of lives that the user starts with and how big and how
many asteroids are generated per level.&lt;/p>
&lt;h2 id="suggestible">Suggestible?&lt;/h2>
&lt;p>As a learning project, Asteroids is one of the better ones that I did. I would
suggest others give it a shot and try their best to come up with efficient ways
to add all of the functionality themselves.&lt;/p></description></item><item><title>Properly Auto-mount Drives in Ubuntu</title><link>https://vlek.github.io/properly-auto-mount-drives-in-ubuntu/</link><pubDate>Sun, 18 Sep 2022 22:10:32 -0700</pubDate><guid>https://vlek.github.io/properly-auto-mount-drives-in-ubuntu/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>SSDs are fast. However, large ones are still quite expensive and those insane
read/write speeds are not necessary for all types of content anyway. For videos,
music, and images, it could be much easier on the wallet to store those on a
separate hard-drive, especially as HDD drives are relatively inexpensive and
large.&lt;/p>
&lt;p>I personally use Linux, I prefer it over Windows for so many reasons. I tend to
use Ubuntu or Ubuntu-derivates, so this is geared towards that system
specifically. I am unsure, but I believe that these steps may be applicable to
other distros, but that is the one that I have tried this on multiple times.&lt;/p>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;p>Please note that I am going to assume the folder that you wish to have the
contents of the mounted drive at will be called &amp;lsquo;data&amp;rsquo;. Please replace in the
below instructions if you wish for the folder to have a different name.&lt;/p>
&lt;h3 id="1-connect-the-external-drive-to-the-ubuntu-pc">1. Connect the external drive to the Ubuntu PC.&lt;/h3>
&lt;h3 id="2-gather-drive-info">2. Gather drive info&lt;/h3>
&lt;ol>
&lt;li>Get the name of the drive using &lt;code>sudo fdisk -l&lt;/code>
&lt;ol>
&lt;li>It is likely that the drive name will start with &lt;code>/dev/sd&lt;/code>, confirm your
selection by double-checking the drive size.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Get the UUID using &lt;code>sudo blkid&lt;/code>
&lt;ol>
&lt;li>Using the drive name we got in the previous step, we can find the specific
entry&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="3-make-the-mount-point">3. Make the mount point&lt;/h3>
&lt;ol>
&lt;li>&lt;code>sudo mkdir /data&lt;/code>
1. Note that there are two ways to do this: either you create the folder
under &lt;code>/media/&amp;lt;username&amp;gt;/&lt;/code>, or you put it elsewhere. Placing it in the
media folder will automatically allow that user to have read and write
access to the mount point. If that is not what is desired or you would
like other users to also be able to access those files, consider placing
them elsewhere.&lt;/li>
&lt;/ol>
&lt;h3 id="4-give-users-access-to-the-mount-point">4. Give users access to the mount point&lt;/h3>
&lt;ol>
&lt;li>&lt;code>sudo groupadd data&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo usermod -aG data &amp;lt;username&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>sudo chown -R :data /data&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="5-create-new-entry-in-fstab">5. Create new entry in &lt;code>fstab&lt;/code>:&lt;/h3>
&lt;ol>
&lt;li>&lt;code>sudo vim /etc/fstab&lt;/code>&lt;/li>
&lt;li>Add a new line in the format: &lt;code>UUID=&amp;lt;ID from blkid&amp;gt; /data auto nosuid,nodev,nofail,x-gvfs-show 0 0&lt;/code>&lt;/li>
&lt;li>Test entry using &lt;code>sudo mount -a&lt;/code>. If no errors, then the entry was added
correctly and you are safe to reboot.&lt;/li>
&lt;/ol>
&lt;h3 id="6-reboot">6. Reboot&lt;/h3>
&lt;p>&lt;br>&lt;br>
After your computer is done rebooting, you should be able to navigate to the
location of the drive and see that it had automounted and that its contents are
available to the users that were given access.&lt;/p></description></item><item><title>Creating an Auto-miner Using UORazor</title><link>https://vlek.github.io/creating-an-auto-miner-using-uorazor/</link><pubDate>Sun, 12 Jun 2022 14:13:28 -0700</pubDate><guid>https://vlek.github.io/creating-an-auto-miner-using-uorazor/</guid><description>&lt;p>&lt;img src="https://vlek.github.io/creating-an-auto-miner-using-uorazor/images/uo_background.jpg" alt="UO Nostalgia">&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>I am a long-time Ultima Online player. I have gone through the game during many
of its periods, experienced the game before assistant programs were widely used,
and I have also used many different macroing systems. This is what sparked my
interest in computer science and ultimately what I cut my teeth on when I was
first starting out. I wouldn&amp;rsquo;t suggest that anyone goes about it the way I did,
especially since, for many servers (and many other games for that matter), what
I was doing was considered cheating. Luckily the server that I was playing at
the time, UOHybrid, did not consider macroing cheating so long as you were using
an approved client assistant program and you were there at your PC watching it
work.&lt;/p>
&lt;p>One of the first client assistant programs that came out that got widely used
(and, for some reason, still is used today even though there are other, better
programs out there that replace the client completely with something that is not
stuck at &amp;lt;30 FPS) is UORazor. It&amp;rsquo;s a program that is used to act as a MitM with
the client and the server to allow for packets to be interpreted and injected by
the assistant to allow for very basic automated actions to occur (think opening
doors when you get close to them so you don&amp;rsquo;t have to manually open them. This
is, after all, a game from the 90&amp;rsquo;s.)&lt;/p>
&lt;!--
![UORazor Logo](/creating-an-auto-miner-using-uorazor/images/uorazor_logo.png)
-->
&lt;p>While I had moved on to things like UOSteam to really take advantage of being
able to type out scripts, having the ability to hold state in variables
(revolutionary, I know), and other client-side niceties, a fair number stayed on
UORazor and were screaming for help to deal with its shortcomings. One of the
never-ending debates that came from the forums for UO were what assistant to
use. This was largely a factor of what the server allowed, but, by and large,
they were unable to detect (or simply didn&amp;rsquo;t care enough to programmatically
track) someone doing otherwise.&lt;/p>
&lt;p>During some of these debates on what clients people should be using, the topic
of how capable they are of automation would inevitably be one of the factors.
UOSteam and others were considered, and rightfully so, capable of more
automation and thus considered cheater clients. One argument I usually posited
was that, regardless of what is or is not cheating, I was having fun. Learning
how to program, implementing it, and seeing things run was very rewarding. Using
those experiences, I landed and excelled in a process automation developer role.
Others were completely willing to overlook the fun aspect of what I was
attempting to do, so I generally also would posit as an aside that UORazor was
also likely capable of that same sort of full process automation as well. It is
that statement of likelihood that I would like to address in this article and
fully flesh out whether it is in fact possible or if I was making false claims.&lt;/p>
&lt;h1 id="environment-setup">Environment Setup&lt;/h1>
&lt;p>One thing I was not looking forward to was figuring out how best to set up my
environment given that it is two old Windows programs working together. However,
the process was made simple by using Lutris. I followed the instructions given
in &lt;a href="https://www.reddit.com/r/wine_gaming/comments/ejoh2x/comment/fczh7o2/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3">this Reddit thread&lt;/a>.
In case it goes down, they are as follows:&lt;/p>
&lt;details>
&lt;summary>Steps to install Windows app using Lutris&lt;/summary>
&lt;pre tabindex="0">&lt;code>(Posted by u/E3FxGaming on r/wine_gaming 2020/01/03)
## Install Wine Version with Lutris:
Note: Alternatively if you&amp;#39;ve already installed something like Wine-staging on your
PC you could theoretically skip this. You&amp;#39;ll always have the option to pick the Wine
version installed on your system, however the versions Lutris offers also take advantage
of fixes introduced by Proton, so you may want to follow this guide part even with
Wine-staging installed.
1. In Lutris use the three vertical dots in the top right corner &amp;gt; activate &amp;#34;Show Left
Side Panel&amp;#34; if it&amp;#39;s deactivated
2. Hover your mouse cursor over the &amp;#34;Wine&amp;#34; entry in the left side panel, there should be
a download icon &amp;#34;Manage Versions&amp;#34; - click that.
3. Tick the Wine version you want to use. It&amp;#39;ll download the Wine version - you can click
the &amp;#34;OK&amp;#34; button to close the dialogue afterwards.
## Install Game:
1. Create a new folder somewhere under which the new wine prefix will be set-up.
2. In Lutris in the top left corner click the plus icon &amp;gt; &amp;#34;Add Games...&amp;#34;
3. Set the game name, choose &amp;#34;Wine (Runs Windows games)&amp;#34; as a runner (this is important
because it changes the content of the &amp;#34;Game options&amp;#34; tab
4. On the &amp;#34;Game options&amp;#34; tab select the executable you&amp;#39;ve got (the installer one)
5. On the &amp;#34;Game options&amp;#34; tab select the Wine prefix (just the empty folder you created
during step 1)
6. On the &amp;#34;Runner options&amp;#34; tab make sure your desired Wine version is used.
7. Click the &amp;#34;Save&amp;#34; button in the bottom right corner to close the dialogue. Select the
newely created game entry in your Lutris library and use the &amp;#34;Play&amp;#34; button (right side
panel - if not enabled you can enable it with the three vertical dots menu in the top
right corner).
8. Follow and complete the installation wizard.
## Edit Stuff and Install Additional Patches:
1. Right click on your newely created Lutris library entry &amp;gt; &amp;#34;Configure&amp;#34;.
2. On the &amp;#34;Game options&amp;#34; tab point the executable entry towards the exe that would launch
your game (should be in some sub-folder of the wine prefix folder you created). Do not
point it to one of your patches, there is an easier way to install those than constantly
editing your Lutris game configuration.
4. Click the &amp;#34;Save&amp;#34; button in the bottom right corner to save your change and close the
dialogue.
6. Once more use the &amp;#34;Play&amp;#34; button to confirm your base game works. After confirming it
close your game. (you can use the &amp;#34;Kill all Wine processes&amp;#34; option in the right side
panel to ensure all Wine processes have ended)
9. Eiter right click your game or use the right side panel &amp;gt; &amp;#34;Run EXE inside wine prefix&amp;#34; &amp;gt;
choose your patch exe and follow the wizard instructions.
Congrats, game should be installed and patched, the &amp;#34;Play&amp;#34; button should still start the
game like normal.
&lt;/code>&lt;/pre>&lt;/details>
&lt;p>It was honestly very easy. I do not know why I have had issues in the past
installing things outside of Steam because it was straightforward. I had a bit
of an issue initially because UO.com now only ships a lite installer that does
not initially do the updating necessary to get the client.exe and other files
necessary to play. So I had to go in and run UO.exe to update to get the needed
files. After that was done, it was simple to install UORazor and it
automatically detected the version of UO installed within the container.&lt;/p>
&lt;h1 id="a-re-look-at-uorazors-macroing-system">A re-look at UORazor&amp;rsquo;s macroing system&lt;/h1>
&lt;p>First thing first, I wanted to try to start fresh by going over the macroing
system as if I were viewing it for the first time. Since the last time I opened
the program, I have gone through an entire master&amp;rsquo;s program and have several
years of development experience under my belt now.&lt;/p>
&lt;p>&lt;img src="https://vlek.github.io/creating-an-auto-miner-using-uorazor/images/blank_macro_canvas.png" alt="Blank MacroScreen">&lt;/p>
&lt;h2 id="the-things-i-noticed">The things I noticed&lt;/h2>
&lt;ul>
&lt;li>The macroing system does allow for typing in commands now, but albeit not in a
way that is readily usable. It is still better to record actions, copy them
out, and then paste them into the editor than trying to type them out.&lt;/li>
&lt;li>It is incredibly hard to get all of the actions done in a way that it would be
able to record all in one go, but that seems to be the way the editor wishes
one to do things.&lt;/li>
&lt;li>I tried to chain macros by calling one after another, but it seems to treat a
macro call like a callback function.
&lt;ul>
&lt;li>This does mean however that that called macro can call another macro and
they can be daisy-chained in such a way that they allow for the control flow
to be passed along. Not much is lost using this method because we do not
have the ability to have state-holding variables anyway.&lt;/li>
&lt;li>One seriously irksome thing though with this is that, if you are using
categories to try to keep your macros in a sane directory tree, those macros
need to be placed into there respective categories first before being called
in another macro otherwise it creates a duplicate of the called macro in the
previous location where it existed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="getting-around-limitations">Getting around limitations&lt;/h2>
&lt;h3 id="variables-for-holding-state">Variables for holding state&lt;/h3>
&lt;p>Unfortunately the assistant does not have the ability to save any variables
whatsoever. This is very bothersome for managing the locations that we are going
to teleport to and ensuring that a progressive order is being kept.&lt;/p>
&lt;p>The way that I found to get around this however is to keep a bundle of a
specific item that is not used for this process in the main container space of
my bank. This allows me to check its count and use that as a way to know, using
the limited conditional statement availability, where to go next.&lt;/p>
&lt;pre tabindex="0">&lt;code>If there are no arrows,
take from the main stack of arrows the maximum rune count number in bank box
Cast Recall
If count &amp;gt;= 16:
teleport to rune 16
Else:
If count &amp;gt;= 15:
teleport to rune 15
Else:
etc...
End If
Enf If
&lt;/code>&lt;/pre>&lt;h3 id="trying-to-make-sure-we-are-not-overweight-when-teleporting-back-home">Trying to make sure we are not overweight when teleporting back home&lt;/h3>
&lt;p>There really is not a good way to do this, even assistants like UOSteam were not
great at handling this. The best thing to do would be to match the ore colors
and combine them into their lightest type (It doesn&amp;rsquo;t make sense, but there is a
small pile graphic that is much lighter.)&lt;/p>
&lt;p>In order to deal with this, we will instead for-loop enough times that, even if
we got the big piles every time, we would be at or below our max weight.&lt;/p>
&lt;h3 id="getting-the-most-ore-back-possible">Getting the most ore back possible&lt;/h3>
&lt;p>When overweight, it might make sense to jettison some of the collected ore. We
want to do that as little as possible. There is also the problem of leaving a
vein not mined completely so we are not getting as much bang for our teleport.
We have to deal with this limitation by analyzing the amount of loops we are
doing and ensuring a good balance is struck.&lt;/p>
&lt;h3 id="leaving-as-few-seconds-wasted-per-location-as-possible">Leaving as few seconds wasted per location as possible&lt;/h3>
&lt;p>There are very clearly areas where the macro is going to be slow, especially
with recalling, ensuring that things are not stepping on each other as state is
not held back while queued actions happen, and server latency is an issue. This
is again not something with an elegant solution, it is just a matter of multiple
runs and playing with times until things generally work most of the time.&lt;/p>
&lt;h3 id="trying-not-to-dieget-caught-by-game-masters">Trying not to die/get caught by game masters&lt;/h3>
&lt;p>The best way that I have found to handle this is not with code but by ensuring
the locations that the user goes to collect resources are in areas that do not
have monsters nor any real foot traffic. These may even be in areas in town
which rarely get looked at.&lt;/p>
&lt;h3 id="dealing-with-in-game-server-saves">Dealing with in-game server saves&lt;/h3>
&lt;p>This unfortunately is one that is just going to be a pain and not one that we
can really get around in a good way.&lt;/p>
&lt;p>The way that I could imagine dealing with this is by pigeon holing the system
message when it happens, teleporting to a safe location, and closing out of the
game. Another process would be watching for the game client process and restart
it if the game client closes with the last log messages being that a save was
happening and not something like the player died or ran out of resources.&lt;/p>
&lt;h3 id="resources-suck-and-you-run-out-of-them-quicker-than-you-think">Resources suck and you run out of them quicker than you think&lt;/h3>
&lt;p>With RunUO&amp;rsquo;s buy agent, it is possible that a full cycle bot could be created so
long as the player was flush with cash or was also placing items on a vendor to
sell for money. That is pretty deep, usually the place I stopped because I had
issues getting it to work correctly, so I am going to say that this is likely
possible with a bunch of asterisks applied.&lt;/p>
&lt;h3 id="z-axis-targeting">Z-Axis Targeting&lt;/h3>
&lt;p>For some reason, some of the time when targeting the ground it wants to take
into consideration the Z-Axis which means that we may be targeting an area that
is above or below the actual ground as the terrain is not flat. While the RunUO
code does not appear to care, Razor apparently does. Some of the runes that were
previously marked for other assistant programs may need to be re-marked in
locations where the terrain is flat enough for Razor to register.&lt;/p>
&lt;h4 id="runes-with-issues">Runes with issues:&lt;/h4>
&lt;p>In the end after going through all 32 runes several times, I came up with a list
of the ones that I had to make changes to and the reason why:&lt;/p>
&lt;ul>
&lt;li>3: Unhappy alligator&lt;/li>
&lt;li>8: Unable to target&lt;/li>
&lt;li>13: Unable to target&lt;/li>
&lt;li>15: Unable to target&lt;/li>
&lt;li>16: A harpy lives here, does not appreciate company&lt;/li>
&lt;/ul>
&lt;h1 id="solution-design">Solution Design&lt;/h1>
&lt;p>Having done some research into what is possible, it was time to put that work to
use and figure out the best way to put those lessons learned into practice.&lt;/p>
&lt;h2 id="pseudocode">Pseudocode&lt;/h2>
&lt;pre tabindex="0">&lt;code>while not dead
for each mining location
put any ore in inventory in the bank
check for resources and restock
if we do not have enough resources
break with exception message
teleport to location
mine until the spot is empty or we are overweight
if overweight, dump ore until at or under weight limit
if our tools break, make a new one
teleport back
&lt;/code>&lt;/pre>&lt;h2 id="logical-submacros">Logical submacros&lt;/h2>
&lt;p>While-loops are not available in the code, at least not by name. We also cannot
search for and for-loop over a range, so that does not allow us to deal with the
runebook GUIs to be able to recall to different locations. Taking these
considerations into mind from the previous research, I broke up the logic into
several chunks:&lt;/p>
&lt;ul>
&lt;li>Banking Ore&lt;/li>
&lt;li>Restocking inventory&lt;/li>
&lt;li>Teleporting to next location&lt;/li>
&lt;li>Mining Ore&lt;/li>
&lt;li>Teleporting back to the bank&lt;/li>
&lt;/ul>
&lt;p>The state machine diagram is as follows:&lt;/p>
&lt;p>&lt;img src="https://vlek.github.io/creating-an-auto-miner-using-uorazor/images/macro-state-machine.svg" alt="Submacro state machine">&lt;/p>
&lt;h1 id="implementation">Implementation&lt;/h1>
&lt;p>Originally when trying to implement this years ago, I believe I had given up due
to the constraints thinking that there was no real way around them, or,
rightfully so, that, if I was going to achieve this feat, it was going to be
with better tools.&lt;/p>
&lt;h2 id="setbacks">Setbacks&lt;/h2>
&lt;p>I had completely forgotten about server saves until I loaded up the game and
started taking inventory of the stuff that I had. As soon as the first one
happened, I knew immediately that it was going to return and haunt me. What
happens is, every so often, the server pauses and performs a save. This means
that anything you are doing is paused, the server does not allow for any new
input, and things are in a holding pattern until the save completes, anywhere
from less than a second for a personal server to well over a minute in some
cases for very large servers. In other assistants, they have the ability to read
system log messages and conditionally handle them, which allows them to wait out
saves until the save complete message is given. Not for us however, this is just
going to be a thorn in my side the whole time.&lt;/p>
&lt;p>Unfortunately, I believe they were having race conditions, the macro window did
not know which scope I was in half the time, and it was just very clear that
Razor was not intended nor really capable of handling what I was trying to do.&lt;/p>
&lt;h2 id="workarounds">Workarounds&lt;/h2>
&lt;p>What I found is that there is a problem with the restock/organizer agents in
that they continue on as though they spawned off another process to get them
done. This means that the macros were continuing on even though there were item
moves being added to a movement queue that was causing issues. This was smoothed
over with waits, but it is not an elegant solution by any means.&lt;/p>
&lt;p>To get around the macro window issue, I copy and pasted all of my working code
into a single macro. Luckily it was a straight shot through, there were no real
areas were things were interconnected except for the exception message I was
giving if I ran out of resources.&lt;/p>
&lt;h2 id="recording">Recording&lt;/h2>
&lt;video controls autoplay loop style="width:100%;">
&lt;source src="https://vlek.github.io/creating-an-auto-miner-using-uorazor/images/autominer_run.mp4">
Your browser does not support the video tag. :(
&lt;/video>
&lt;h2 id="code">Code&lt;/h2>
&lt;details>
&lt;pre tabindex="0">&lt;code>!Loop
Assistant.Macros.SpeechAction|0|52|3|ENU|2|16|2|Banco
Assistant.Macros.PauseAction|00:00:01
Assistant.Macros.HotKeyAction|0|Organizer Agent-1
Assistant.Macros.PauseAction|00:00:01
Assistant.Macros.WaitForStatAction|0|1|95|3600
Assistant.Macros.WaitForStatAction|1|1|95|3600
Assistant.Macros.HotKeyAction|0|Restock Agent-1
Assistant.Macros.AbsoluteTargetAction|0|0|214848|5272|3971|37|400
Assistant.Macros.PauseAction|00:00:01
Assistant.Macros.IfAction|50|0|0|Black Pearl
Assistant.Macros.HotKeyAction|0|Play: AutoMiner_SubMacros\AutoMiner_Exceptions\Exception_RanOutOfResources
Assistant.Macros.EndIfAction
Assistant.Macros.IfAction|50|0|0|Mandrake Root
Assistant.Macros.HotKeyAction|0|Play: AutoMiner_SubMacros\AutoMiner_Exceptions\Exception_RanOutOfResources
Assistant.Macros.EndIfAction
Assistant.Macros.IfAction|50|0|0|Blood Moss
Assistant.Macros.HotKeyAction|0|Play: AutoMiner_SubMacros\AutoMiner_Exceptions\Exception_RanOutOfResources
Assistant.Macros.EndIfAction
Assistant.Macros.DoubleClickAction|1074419899|3705
Assistant.Macros.PauseAction|00:00:01
Assistant.Macros.IfAction|50|0|0|Arrows
Assistant.Macros.HotKeyAction|0|Restock Agent-2
Assistant.Macros.AbsoluteTargetAction|0|0|1074419899|29|123|0|3705
Assistant.Macros.PauseAction|00:00:03
Assistant.Macros.EndIfAction
Assistant.Macros.PauseAction|00:00:01
Assistant.Macros.LiftTypeAction|3903|1
Assistant.Macros.LiftAction|1081626294|1|3903
Assistant.Macros.DropAction|0x400A58BB|(-1, -1, 0)|0
Assistant.Macros.PauseAction|00:00:01
Assistant.Macros.MacroCastSpellAction|32
Assistant.Macros.WaitForTargetAction|30
Assistant.Macros.IfAction|50|0|1|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074530688|45|66|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|2|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074527814|60|66|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|3|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074528518|75|66|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|4|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074529318|90|66|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|5|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074529671|106|66|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|6|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074528271|122|66|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|7|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074529940|139|66|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|8|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074527427|45|83|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|9|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074531668|61|82|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|10|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074529472|76|82|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|11|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074531101|90|82|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|12|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074529038|106|81|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|13|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074531976|122|81|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|14|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074527078|140|80|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|15|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074526834|45|100|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|16|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1074531896|61|100|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|17|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145013|124|96|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|18|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145029|141|97|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|19|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145041|45|114|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|20|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145008|61|114|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|21|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082144978|76|114|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|22|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082144984|91|113|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|23|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145010|108|113|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|24|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082144985|124|112|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|25|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082144973|141|113|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|26|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145026|45|129|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|27|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145017|61|129|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|28|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145015|75|129|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|29|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145018|90|129|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|30|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082144989|108|129|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|31|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145031|122|129|0|7956
Assistant.Macros.ElseAction
Assistant.Macros.IfAction|50|0|32|Arrows
Assistant.Macros.AbsoluteTargetAction|0|0|1082145049|141|129|0|7956
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.EndIfAction
Assistant.Macros.ForAction|13
Assistant.Macros.IfAction|50|0|1|Tinker&amp;#39;s Tools
Assistant.Macros.PauseAction|00:00:00.7500000
Assistant.Macros.DoubleClickTypeAction|7864|True
Assistant.Macros.WaitForGumpAction|949095101|True|300
Assistant.Macros.GumpResponseAction|23|0|0
Assistant.Macros.WaitForGumpAction|949095101|True|300
Assistant.Macros.GumpResponseAction|0|0|0
Assistant.Macros.EndIfAction
Assistant.Macros.PauseAction|00:00:00.2500000
Assistant.Macros.IfAction|50|0|0|Pickaxe
Assistant.Macros.PauseAction|00:00:01.5000000
Assistant.Macros.DoubleClickTypeAction|7864|True
Assistant.Macros.WaitForGumpAction|949095101|True|300
Assistant.Macros.GumpResponseAction|114|0|0
Assistant.Macros.WaitForGumpAction|949095101|True|300
Assistant.Macros.GumpResponseAction|0|0|0
Assistant.Macros.EndIfAction
Assistant.Macros.DoubleClickTypeAction|3718|True
Assistant.Macros.WaitForTargetAction|30
Assistant.Macros.TargetRelLocAction|0|-1
Assistant.Macros.PauseAction|00:00:00.9500000
Assistant.Macros.EndForAction
Assistant.Macros.MacroCastSpellAction|32
Assistant.Macros.WaitForTargetAction|30
Assistant.Macros.AbsoluteTargetAction|0|0|1086580354|45|66|0|3834
&lt;/code>&lt;/pre>&lt;/details>
&lt;h1 id="analytics">Analytics&lt;/h1>
&lt;p>While static analysis is impractical and code quality is lacking, analysis can
still be performed on the output of the process to ensure that it is functioning
correctly and within a reasonable timeframe.&lt;/p>
&lt;h2 id="methodology">Methodology&lt;/h2>
&lt;p>While in-game monitoring was only going to allow me to measure things in the
aggregate, I opted to have the in-game logs output to a file and analyze the
results that way. It was able to give me per-teleport and per-run numbers.&lt;/p>
&lt;p>In order to measure a full run&amp;rsquo;s worth of material, I cleared out my ore bag,
counted my starting resource amounts, and run the process again after modifying
the code such, when it would replenish my arrow stack to start over again, it
instead stops with a message saying that the run was complete.&lt;/p>
&lt;h3 id="tooling">Tooling&lt;/h3>
&lt;p>The tools used to perform the analysis were the standard UO client, UORazor, and
linux-based commandline tools (grep, wc, etc.) along with Vim.&lt;/p>
&lt;h3 id="changes-to-process">Changes to Process&lt;/h3>
&lt;ul>
&lt;li>In order to have data to analyze, the client needed to be configured to output
the log file which required some configuration changes.&lt;/li>
&lt;li>We also should have done a single click on the arrow type in the backpack to
be able to know which spot was being mined.&lt;/li>
&lt;/ul>
&lt;h2 id="results">Results&lt;/h2>
&lt;h3 id="starting-resources">Starting Resources:&lt;/h3>
&lt;ul>
&lt;li>Iron Ingots: 9141&lt;/li>
&lt;li>Black Pearl: 826&lt;/li>
&lt;li>Mandrake Root: 1238&lt;/li>
&lt;li>Blood Moss: 1188&lt;/li>
&lt;/ul>
&lt;h3 id="ending-resources">Ending Resources:&lt;/h3>
&lt;ul>
&lt;li>Iron Ingots: 9085&lt;/li>
&lt;li>Black Pearl: 638&lt;/li>
&lt;li>Mandrake Root: 1052&lt;/li>
&lt;li>Blood Moss: 1000&lt;/li>
&lt;/ul>
&lt;h3 id="mining-outcomes">Mining Outcomes:&lt;/h3>
&lt;ul>
&lt;li>Iron: 628&lt;/li>
&lt;li>Shadow: 492&lt;/li>
&lt;li>Failed to mine: 79&lt;/li>
&lt;li>Resources depleted: 22&lt;/li>
&lt;/ul>
&lt;h3 id="ore-mined">Ore Mined:&lt;/h3>
&lt;p>Iron: 4194
Shadow: 3344
Gold: 76&lt;/p>
&lt;p>All ore was converted down into the smallest ore piles *&lt;/p>
&lt;h3 id="tools-broken">Tools Broken:&lt;/h3>
&lt;ul>
&lt;li>Pickaxes: 14&lt;/li>
&lt;/ul>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;h2 id="overall-assessment">Overall assessment&lt;/h2>
&lt;p>Due to the new achievement system, I was working with a clean slate. By the time
I felt like I had a working script done, I was just passed 20k ore mined, which
is quite an achievement and something that would have taken some time to mine by
hand.&lt;/p>
&lt;p>I feel accomplished, like I had gotten something done that was nagging me in the
back of my mind for a while. Although not perfect, I feel like I have proven
within an afternoon that this is possible, additional polish may be applied to
get it working even better, but what I have presented works.&lt;/p>
&lt;p>You know that what you made works when it is the case that you feel comfortable
taking your eyes off of it. During the results run, I was able to have the
process run for nearly two hours without intervention before an errant lag spike
caused it to trip up.&lt;/p>
&lt;h2 id="things-that-could-be-better">Things that could be better&lt;/h2>
&lt;h3 id="teleporting">Teleporting&lt;/h3>
&lt;p>One of the slowest parts of the bot is the selection for which spot to teleport
next. What I did works, but the nested if statements are all parsed in order so
there is a significant lag as it goes through all of the &lt;code>Ifs&lt;/code> and then the &lt;code>End Ifs&lt;/code>. The way that I could think of doing this that will scale is to do a binary
search using submacros. This will get around most of the nested &lt;code>If&lt;/code>&amp;rsquo;s where
possible.&lt;/p>
&lt;h3 id="locations">Locations&lt;/h3>
&lt;p>I was using the books and spots that I had. However, these were not necessarily
the best spots. I do not know if the two books I had were not repeats.&lt;/p>
&lt;h2 id="applicability">Applicability&lt;/h2>
&lt;p>While I did this specifically for mining ore, the technique could readily be
applied to other types of resources. I am thinking specifically lumberjacking as
a potential candidate.&lt;/p>
&lt;h2 id="suggestible">Suggestible?&lt;/h2>
&lt;p>In no way would I suggest someone do this. Not only is it potentially not
allowed by the server that one is playing on, it also is just silly. There are
other clients, other means of doing the same thing. This was, as stated in the
introduction, merely to show it is possible.&lt;/p></description></item></channel></rss>